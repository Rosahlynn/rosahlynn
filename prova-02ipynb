{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM9ojeeELwNcjRimskaqPh2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rosahlynn/rosahlynn/blob/main/prova-02ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q_QcdecJNBP_",
        "outputId": "19a029f6-ca16-48ec-8440-48a7b975d774"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hostname: localhost, IP: 127.0.0.1\n",
            "Hostname: google.com, IP: 216.58.222.78\n",
            "Hostname: amazon.com, IP: 176.32.103.205\n",
            "Hostname: facebook.com, IP: 31.13.74.35\n",
            "\n",
            "Hostnames:\n",
            "google.com: 216.58.222.78\n",
            "localhost: 127.0.0.1\n",
            "amazon.com: 176.32.103.205\n",
            "facebook.com: 31.13.74.35\n",
            "\n",
            "Lista após remoção:\n",
            "Hostname: localhost, IP: 127.0.0.1\n",
            "Hostname: amazon.com, IP: 176.32.103.205\n",
            "Hostname: facebook.com, IP: 31.13.74.35\n",
            "\n",
            "Ordenando por hostname:\n",
            "Hostname: amazon.com, IP: 176.32.103.205\n",
            "Hostname: facebook.com, IP: 31.13.74.35\n",
            "Hostname: localhost, IP: 127.0.0.1\n"
          ]
        }
      ],
      "source": [
        "class No:\n",
        "    def __init__(self, host, ip):\n",
        "        self.host = host\n",
        "        self.ip = ip\n",
        "        self.prox = None\n",
        "\n",
        "\n",
        "    @property\n",
        "    def prox(self):\n",
        "        return self.__prox\n",
        "\n",
        "    @prox.setter\n",
        "    def prox(self, prox):\n",
        "        self.__prox = prox\n",
        "\n",
        "    @property\n",
        "    def host(self):\n",
        "        return self.__host\n",
        "\n",
        "    @host.setter\n",
        "    def host(self, host):\n",
        "        self.__host = host\n",
        "\n",
        "    @property\n",
        "    def ip(self):\n",
        "        return self.__ip\n",
        "\n",
        "    @ip.setter\n",
        "    def ip(self, ip):\n",
        "        self.__ip = ip\n",
        "\n",
        "\n",
        "\n",
        "class EstruturaLinear:\n",
        "    def __init__(self):\n",
        "        self.cabeca = None\n",
        "\n",
        "    def adicionar(self, hostname, ip):\n",
        "        novo_no = No(hostname, ip)\n",
        "        if not self.cabeca:\n",
        "            self.cabeca = novo_no\n",
        "        else:\n",
        "            current = self.cabeca\n",
        "            while current.prox:\n",
        "                current = current.prox\n",
        "            current.prox = novo_no\n",
        "\n",
        "    def remover(self, host, ip):\n",
        "        current = self.cabeca\n",
        "        previous = None\n",
        "\n",
        "        while current:\n",
        "            if current.host == host and current.ip == ip:\n",
        "                if previous:\n",
        "                    previous.prox = current.prox\n",
        "                else:\n",
        "                    self.cabeca = current.prox\n",
        "                return\n",
        "            previous = current\n",
        "            current = current.prox\n",
        "\n",
        "    def resolver(self, host):\n",
        "        current = self.cabeca\n",
        "        while current:\n",
        "            if current.host == host:\n",
        "                return current.ip\n",
        "            current = current.prox\n",
        "        return None\n",
        "\n",
        "    def listar(self):\n",
        "        current = self.cabeca\n",
        "        while current:\n",
        "            print(f\"Hostname: {current.host}, IP: {current.ip}\")\n",
        "            current = current.prox\n",
        "\n",
        "    def ordenar(self):\n",
        "        lista = []\n",
        "        atual = self.cabeca\n",
        "        while atual is not None:\n",
        "            lista.append((atual.host, atual.ip))\n",
        "            atual = atual.prox\n",
        "        lista.sort()\n",
        "        self.cabeca = None\n",
        "        for item in lista:\n",
        "            self.adicionar(item[0], item[1])\n",
        "\n",
        "\n",
        "resolver = EstruturaLinear()\n",
        "resolver.adicionar(\"localhost\", \"127.0.0.1\")\n",
        "resolver.adicionar(\"google.com\", \"216.58.222.78\")\n",
        "resolver.adicionar(\"amazon.com\", \"176.32.103.205\")\n",
        "resolver.adicionar(\"facebook.com\", \"31.13.74.35\")\n",
        "\n",
        "resolver.listar()\n",
        "\n",
        "print(\"\\nHostnames:\")\n",
        "print(\"google.com:\", resolver.resolver(\"google.com\"))\n",
        "print(\"localhost:\", resolver.resolver(\"localhost\"))\n",
        "print(\"amazon.com:\", resolver.resolver(\"amazon.com\"))\n",
        "print(\"facebook.com:\", resolver.resolver(\"facebook.com\"))\n",
        "\n",
        "resolver.remover(\"google.com\", \"216.58.222.78\")\n",
        "print(\"\\nLista após remoção:\")\n",
        "resolver.listar()\n",
        "\n",
        "print(\"\\nOrdenando por hostname:\")\n",
        "resolver.ordenar()\n",
        "resolver.listar()"
      ]
    }
  ]
}